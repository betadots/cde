#!/usr/bin/env bash

usage() { 
    echo "$0 <up|destroy|ssh> [host target] [-h] [-v] [-p <proxmox|hetzner>]"
}

version() { 
    echo "0.2.0"
}

# default provider
provider="proxmox"

# subcommands
args=()

# check if required binaries exist
err=0; for cmd in bolt facter terraform jq; do
    if ! which $cmd >/dev/null 2>&1; then
        echo "${cmd}: binary isn't find."
        err=$((err+1))
    fi

    if (($err > 0)); then
      exit 1
    fi
done


while [ $OPTIND -le "$#" ]
do
    if getopts hvp: option
    then
        case $option
        in
            p) provider="$OPTARG";;
            v) version; exit 0;;
            h) usage; exit 0;;
        esac
    else
        args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

# implemented providers
case $provider in
    proxmox)
      if [[ "x${args[1]}" != "x" ]]; then
          vm="target='module.pve_vm[\"${args[1]}\"]'"
      fi
      ;;
    hetzner)
      echo "provider: ${provider} is not implemented."
      exit 0
      ;;
    *)
      echo "Unknown provider: ${provider}"
      exit 1
esac


# subcommands
case "${args[0]}" in
    up)  
        bolt plan run terraform::apply dir=./terraform $vm
        ;;
    destroy)
        bolt plan run terraform::destroy dir=./terraform $vm
        ;;
    ssh)
        if [[ "x${args[1]}" != "x" ]]; then
            user=$(bolt inventory show --detail --format json |jq -r ".targets[] | select(.name==\"${args[1]}\").config.ssh.user")
            ip=$(bolt inventory show --detail --format json |jq -r ".targets[] | select(.name==\"${args[1]}\").uri")
            if [[ "x${ip}" != "x" && "x${user}" != "x" ]]; then
                ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $user@$ip 2>/dev/null
            else
                echo "Could not found target or user in inventory!"
            exit 1
            fi
        else
            echo "usage: $0 ssh <destination>"
            exit 1
        fi
        ;;
    status)
        terraform -chdir=./terraform refresh >/dev/null 2>&1
        if [[ "x${args[1]}" != "x" ]]; then
            for target in ${args[@]:1}; do
               terraform -chdir=./terraform output -json status |jq -r "{$target} | to_entries[] | \"\(.key)@\(.value)\"" | column -t -s'@'
            done
        else
            terraform -chdir=./terraform output -json status |jq -r '. | to_entries[] | "\(.key)@\(.value)"' | column -t -s'@'
        fi
        ;;
    init)
        bolt module install
        bolt task run terraform::initialize --target localhost dir=./terraform
        ;;
    *) 
        usage
        exit 1
esac

exit 0
